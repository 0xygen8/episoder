#!/usr/bin/env python
#
# episoder tv.com parser, http://episoder.sourceforge.net/
#
# Copyright (c) 2004-2008 Stefan Ott. All rights reserved.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
# $Id$

import re
import sys
import time
import urllib2
import traceback
from episoder import *
from tempfile import mkstemp
from BeautifulSoup import BeautifulSoup

class TVComSeason(object):
	def __init__(self, season, baseURL):
		self.season = season
		self.url = "%s?season=%d" % (baseURL, season)
#		self.url = "%s_%d" % (baseURL, season)
		self.fetcher = urllib2

	def __extract_field(self, row, name):
		td = row.findChild(attrs={'class': name})
		if not td:
			return ''

		tdcontents = td.contents[0]
		if len(tdcontents) == 0:
			return ''
		contents = tdcontents.contents[0]
		return contents.string

	def parse(self):
		page = self.fetcher.urlopen(self.url)
		soup = BeautifulSoup(page)

		episodes = []

		table = soup.body.table
		tbody = table.contents[1]

		for i in range(0, len(tbody.contents)):
			tr = tbody.contents[i]

			episodeNum = i+1
			title = self.__extract_field(tr, 'ep_title')
			title = title.encode('iso-8859-1')
			prodCode = self.__extract_field(tr, 'ep_prod_code')
			airDateRaw = self.__extract_field(tr, 'ep_air_date')

			num_raw = self.__extract_field(tr, 'num')
			if num_raw.isdigit():
				totalNum = int(self.__extract_field(tr, 'num'))
			else:
				totalNum = 0

			try:
				tme = time.strptime(airDateRaw, '%m/%d/%Y')
				airDate = datetime.date(tme[0], tme[1], tme[2])

				episode = Episode(title, self.season,
					episodeNum, airDate, prodCode, totalNum)
				episodes.append(episode)
			except ValueError:
				pass

		return episodes

class TVComPage(object):
	def __init__(self, url, cached):
		self.url = url
		self.cached = cached

	def getSoup(self):
		try:
			file = open(self.cached, 'r')
		except IOError:
			sys.stderr.write("Error opening %s\n" % self.cached)
			return

		page = file.read()
		file.close()

		return BeautifulSoup(page)

	def findSeasons(self, soup):
		seasons = []

		seasonForm = soup.find(attrs={'class': 'eps_season_form'})
		selector = seasonForm.select
		options = selector.findAll()

		for option in options:
			contents = option.contents[0]
			if re.match('^Season .*', contents):
				(_, num) = contents.split(' ')
				seasons.append(int(num))

		return seasons

	def findTitle(self, soup):
		pageTitle = soup.title.contents[0]
		exp = re.compile(" Episode List")
		title = exp.split(pageTitle)[0]

		return title

	def parse(self):
		soup = self.getSoup()
		seasons = self.findSeasons(soup)
		title = self.findTitle(soup)

		show = Show(title)

		for season in seasons:
			try:
				episodes = self.getSeason(season)
				for episode in episodes:
					show.addEpisode(episode)
			except urllib2.HTTPError:
				sys.stderr.write("Error fetching season %d\n"
					% season)

		(_, fileName) = mkstemp()
		data = EpisoderData(fileName)
		data.shows.append(show)
		data.save()

		return fileName

	def getSeason(self, season):
		season = TVComSeason(season, self.url)
		return season.parse()

if __name__ == "__main__":
	argv = sys.argv

	if len(argv) != 3:
		sys.stderr.write("Syntax: %s <url> <cached-file>\n" % argv[0])
		sys.exit(3)

	url = argv[1]
	cached = argv[2]

	if not re.match('^http://www.tv.com/.*episode_listings.html$', url):
		sys.exit(1)

	try:
		page = TVComPage(url, cached)
		yamlfile = page.parse()
	except:
		traceback.print_exc(file=sys.stderr)
		sys.exit(2)
	print yamlfile
